@model WebApp.ViewModel.LobbyViewModel;
@using System.Security.Claims
@using System.Text.Json;

@{
    var identity = (ClaimsIdentity)Context.User.Identity;
    Claim? idClaim = identity.Claims.Where(claim => claim.Type == ClaimTypes.NameIdentifier).FirstOrDefault();
    Claim? accessClaim = identity.Claims.Where(claim => claim.Type == "AccessToken").FirstOrDefault();
    Claim? nameClaim = identity.Claims.Where(claim => claim.Type == ClaimTypes.Name).FirstOrDefault();

    Streamer streamer = new Streamer(nameClaim.Value, accessClaim.Value, idClaim.Value);
    string streamerJson = JsonSerializer.Serialize(streamer);

    string packJson = JsonSerializer.Serialize(Model.Game.QuestionPack);
}

<div id="index">
    <h1>Lobby</h1>
    <p>Selected question pack:</p>
    <h3>@Model.Game.QuestionPack.Name</h3>
    <h3>Players</h3>
    <div>
    </div>
    <a id="startGame" class="btn login-button" onclick="question()">Start</a>
</div>

<div id="question" hidden>
    <h1 id="prompt">What is your favourite food?</h1>
    <h3>Time remaining</h3>
    <h2 id="time"></h2>
    <button id="end">End</button>
    <a asp-action="Game" id="redirect"></a>
</div>

<div id="game" class="center answer" hidden>
    <h1 class="answer-title">@Model.Question.Prompt</h1>
    <div class="answer-grid">
        @for (int i = 0; i < Model.Question.ViewerAnswers.Count(); i++)
        {
            <div id=@i class="answer-item">
                <p class="answer-id">#@(i + 1)</p>
                <div>
                    <p id="answer @i">???</p>
                    <p id="answer-points @i"></p>
                </div>
            </div>
        }
    </div>
    <div class="">Answer</div>
    <input type="text" id="messageInput" />
    <input type="button" id="sendButton" value="Send Message" />
</div>


@section scripts {
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/game.js"></script>
    <script>
        let connectionId;
        //Disable the send button until connection is established.
        document.getElementById("startGame").disabled = true;

        async function connect() {
            await connection.start();

            document.getElementById("startGame").disabled = false;

            //work around but whatever
            if ("@User.Identity.IsAuthenticated" === "True") {
                connection.invoke("CreateGroup", "@streamerJson", "@packJson").catch(function (err) {
                    return console.error(err.toString());
                });

                connectionId = await connection.invoke("GetConnectionId").catch(function (err) {
                    return console.error(err.toString());
                });
            }
        };

        connection.on("TurnAnswer", function (place, message, points) {
            var x = document.getElementById(place);
            x.style.backgroundColor = "red";
            var a = document.getElementById("answer " + place);
            a.innerText = message;
            var ap = document.getElementById("answer-points " + place);
            console.log(ap);
            ap.innerText = points;
        });

        connect();

        async function question()
        {
            
            console.log(connectionId);
            console.log('sad');

            document.getElementById("index").hidden = true;
            document.getElementById("question").hidden = false;

            startGame();
        }

        async function endListening() {

            await connection.invoke("EndListening", connectionId).catch(function (err) {
                return console.error(err.toString());
            });
            console.log("after");
            //document.getElementById("redirect").click();
        }

        async function startGame() {

            document.getElementById("time").innerHTML = "5";

            //connection.invoke("EndListening", connectionId).catch(function (err) {
            //    return console.error(err.toString());
            //});
            console.log(connectionId);

            // Set the date we're counting down to
            var y = 5;

            // Update the count down every 1 second
            var x = setInterval(function () {

                y = y - 1;
                // Output the result in an element with id="demo"
                document.getElementById("time").innerHTML = y;

                // If the count down is over, write some text
                if (y < 0) {
                    clearInterval(x);
                    document.getElementById("time").innerHTML = "Done";
                }
            }, 1000);

            var x = await connection.invoke("StartGame", connectionId).catch(function (err) {
                return console.error(err.toString());
            });
            
            console.log("done");
            console.log(x)

            //document.getElementById("end").addEventListener("click", function (event) {
            //    endListening();
            //});
            game();
        };

        async function game()
        {
            //Disable the send button until connection is established.
            //document.getElementById("sendButton").disabled = true;

            //connection.start().then(function () {
            //    document.getElementById("sendButton").disabled = false;
            //}).catch(function (err) {
            //    return console.error(err.toString());
            //});

            document.getElementById("sendButton").addEventListener("click", function (event) {
                var message = document.getElementById("messageInput").value;
                connection.invoke("SendMessage", message, connectionId).catch(function (err) {
                    return console.error(err.toString());
                });
                event.preventDefault();
            });

            document.getElementById("question").hidden = true;
            document.getElementById("game").hidden = false;
        }
    </script>
}
