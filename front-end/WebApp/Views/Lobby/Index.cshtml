@model Game;
@using System.Security.Claims
@using System.Text.Json;

@{
    var identity = (ClaimsIdentity)Context.User.Identity;
    Claim? idClaim = identity.Claims.Where(claim => claim.Type == ClaimTypes.NameIdentifier).FirstOrDefault();
    Claim? accessClaim = identity.Claims.Where(claim => claim.Type == "AccessToken").FirstOrDefault();
    Claim? nameClaim = identity.Claims.Where(claim => claim.Type == ClaimTypes.Name).FirstOrDefault();

    Streamer streamer = new Streamer(nameClaim.Value, accessClaim.Value, idClaim.Value);
    string streamerJson = JsonSerializer.Serialize(streamer);

    string packJson = JsonSerializer.Serialize(Model.QuestionPack);
}

<div>
    <h1>Lobby</h1>
    <p>Selected question pack:</p>
    <h3>@Model.QuestionPack.Name</h3>
    <h3>Players</h3>
    <div>
    </div>
    <a id="startGame" class="btn login-button" asp-action="Question">Start</a>
</div>


@section scripts {
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/game.js"></script>
    <script>
        //Disable the send button until connection is established.
        document.getElementById("startGame").disabled = true;

        async function connect() {
            await connection.start();

            document.getElementById("startGame").disabled = false;

            //work around but whatever
            if ("@User.Identity.IsAuthenticated" === "True") {
                connection.invoke("CreateGroup", "@streamerJson", "@packJson").catch(function (err) {
                    return console.error(err.toString());
                });

                let id = await connection.invoke("GetConnectionId").catch(function (err) {
                    return console.error(err.toString());
                });

                localStorage.setItem("id", id);
            }
        };

        connect();
    </script>
}
