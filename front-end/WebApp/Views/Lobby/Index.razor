@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json;
@using System.Security.Claims;
@using WebApp.Models;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime;

@switch (gameState)
{
    case GAME_STATE.LOBBY:
        <Lobby Game="StartGame" TimeLimit="@(game?.TimeLimit ?? 0)"></Lobby>
        break;
    case GAME_STATE.LISTENING:
        <Listening EndListening="EndListening" Votes="Votes"></Listening>
        break;
    case GAME_STATE.ANSWERING:
        <Answering Question="@currentQuestion" Answer="Answer" FlippedAnswers="@flippedAnswers"></Answering>
        break;
}


@code {
    private HubConnection? hubConnection;
    private HubConnection? hubConnectionListener;
    private Game? game;
    private ClaimsPrincipal? user;
    private enum GAME_STATE { LOBBY, LISTENING, ANSWERING };
    private GAME_STATE gameState = GAME_STATE.LOBBY;
    private int Votes = 0;
    private Question<Answer> currentQuestion;
    private bool[] flippedAnswers;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
                .Build();

            await hubConnection.StartAsync();

            string json = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "game");
            game = JsonSerializer.Deserialize<Game>(json);

            await hubConnection.InvokeAsync("CreateGroup", hubConnection.ConnectionId, game);

            hubConnection.On("Answered", () =>
            {
                Votes++;
                StateHasChanged();
            });

            StateHasChanged();
        }
    }

    public async Task Answer(string message)
    {
        int answerIndex = await hubConnection.InvokeAsync<int>("SendMessage", hubConnection.ConnectionId, message);

        if (answerIndex >= 0)
        {
            flippedAnswers[answerIndex] = true;

            StateHasChanged();
        } //else bad answer
    }

    public async Task GetCurrentQuestion()
    {
        currentQuestion = await hubConnection.InvokeAsync<Question<Answer>>("GetCurrentQuestion", 
            hubConnection.ConnectionId);

        flippedAnswers = new bool[currentQuestion.Answers.Count];
    }

    public async Task StartGame()
    {
        _ = hubConnection.InvokeAsync("StartGame", hubConnection.ConnectionId);

        gameState = GAME_STATE.LISTENING;

        StateHasChanged();
    }

    public async Task EndListening()
    {
        await hubConnection.InvokeAsync("EndListening", hubConnection.ConnectionId);
        await GetCurrentQuestion();

        gameState = GAME_STATE.ANSWERING;

        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}