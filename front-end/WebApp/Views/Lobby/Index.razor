@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json;
@using System.Security.Claims;
@using WebApp.Models;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime

@switch (lobby?.GameState)
{
    case WebApp.Models.Lobby.GAME_STATE.LOBBY:
        <Lobby IsHosting="isHosting" Game="StartListening" Link="CopyJoinLink"
            QuestionPackName="@lobby.Game?.QuestionPack.Name" Players="lobby.Players"></Lobby>
        break;
    case WebApp.Models.Lobby.GAME_STATE.LISTENING:
        <Listening EndListening="EndListening" Votes="Votes" Prompt="@currentQuestion?.Prompt" 
            TimeLimit="(lobby.Game?.TimeLimit ?? 0)" IsEnoughAnswers="isEnoughAnswers"></Listening>
        break;
    case WebApp.Models.Lobby.GAME_STATE.ANSWERING:
        <Answering Question="currentQuestion" Answer="Answer"
           FlippedAnswers="flippedAnswers" Players="lobby.Players"></Answering>
        break;
    case WebApp.Models.Lobby.GAME_STATE.FINISHED:
        <End Players="lobby.Players"></End>
        break;
}

@code {
    [Parameter]
    public string? Code { get; set; }
    [Parameter]
    public string? Name { get; set; }
    private HubConnection? hubConnection;
    private WebApp.Models.Lobby? lobby;
    //private Game? game;
    //private enum GAME_STATE { LOBBY, LISTENING, ANSWERING, FINISHED };
    //private GAME_STATE gameState = GAME_STATE.LOBBY;
    private int Votes = 0;
    private Question<Answer>? currentQuestion;
    private bool[] flippedAnswers;
    //private List<Player> players = new List<Player>();
    private bool isEnoughAnswers = true;
    private bool isHosting;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
                .Build();

            await hubConnection.StartAsync();

            if (String.IsNullOrWhiteSpace(Code))
            {
                string json = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "game");
                Game game = JsonSerializer.Deserialize<Game>(json);

                await hubConnection.InvokeAsync("CreateGroup", hubConnection.ConnectionId, game);

                isHosting = true;
            }
            else
            {
                bool joined = await hubConnection.InvokeAsync<bool>("JoinGroup", hubConnection.ConnectionId, Code, Name);

                if (!joined)
                {
                    Navigation.NavigateTo("Home/Error", true);
                }
                else
                {
                }
            }

            lobby = await hubConnection.InvokeAsync<WebApp.Models.Lobby>("GetLobbyById", hubConnection.ConnectionId);

            await GetCurrentQuestion();

            StateHasChanged();

            hubConnection.On("Answered", () =>
            {
                Votes++;
                StateHasChanged();
            });

            hubConnection.On<WebApp.Models.Lobby>("LobbyUpdated", (l) =>
            {
                lobby = l;

                StateHasChanged();
            });

            hubConnection.On<string>("Refresh", async (access) =>
            {
                string url = "Lobby/RefreshToken?access=" + access;
                await JsRuntime.InvokeAsync<object>("open", url, "_blank");
            });
        }
    }

    public async Task CopyJoinLink()
    {
        string groupName = await hubConnection.InvokeAsync<string>("GetGroupName", hubConnection.ConnectionId);

        string link = $"https://localhost:7026/lobby/join?code={groupName}";

        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", link);
    }


    public async Task GoToNextQuestion()
    {
        bool isNextQuestion = await hubConnection.InvokeAsync<bool>("GoToNextQuestion",
            hubConnection.ConnectionId);

        if (isNextQuestion)
        {
            await GetCurrentQuestion();
            await StartListening();
        }
        else
        {
            await hubConnection.InvokeAsync("SetGameState", hubConnection.ConnectionId, WebApp.Models.Lobby.GAME_STATE.FINISHED);
        }
    }

    public async Task Answer(string message)
    {
        int answerIndex = await hubConnection.InvokeAsync<int>("SendMessage", hubConnection.ConnectionId, message);

        if (answerIndex >= 0)
        {
            flippedAnswers[answerIndex] = true;

            StateHasChanged();

            if (flippedAnswers.All(answer => answer == true))
            {
                await GoToNextQuestion();
            }
        }
    }

    public async Task GetCurrentQuestion()
    {
        currentQuestion = lobby.Answers[lobby.currentQuestionIndex];

        if (currentQuestion.Answers != null)
        {
            flippedAnswers = new bool[currentQuestion.Answers.Count];
        }
    }

    public async Task StartListening()
    {
        await hubConnection.InvokeAsync("StartListening", hubConnection.ConnectionId);

        isEnoughAnswers = true;

        await hubConnection.InvokeAsync("SetGameState", hubConnection.ConnectionId, WebApp.Models.Lobby.GAME_STATE.LISTENING);

        StateHasChanged();
    }

    public async Task EndListening()
    {
        bool ended = await hubConnection.InvokeAsync<bool>("EndListening", hubConnection.ConnectionId);

        if (!ended)
        {
            isEnoughAnswers = false;
        }
        else
        {
            await hubConnection.InvokeAsync("SetGameState", hubConnection.ConnectionId, WebApp.Models.Lobby.GAME_STATE.ANSWERING);
            await GetCurrentQuestion();
        }

        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}