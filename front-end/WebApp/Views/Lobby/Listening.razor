@using System.Timers;

<h3>ChatListening</h3>
<p>@Prompt</p>
@if (IsHosting)
{
    <button @onclick="End">End</button>
}
<p>@currentTime</p>
@if (!IsEnoughAnswers)
{
    <p>Not Enough Answers</p>
}

@code {
    [Parameter]
    public EventCallback EndListening { get; set; }
    [Parameter]
    public int Votes { get; set; }
    [Parameter]
    public string Prompt { get; set; }
    [Parameter]
    public int TimeLimit { get; set; }
    [Parameter]
    public bool IsEnoughAnswers { get; set; }
    [Parameter]
    public bool IsHosting { get; set; }
    private int currentTime;
    private Timer timer;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            currentTime = TimeLimit;
            StateHasChanged();
            timer = new Timer(1000);

            timer.AutoReset = true;
            timer.Elapsed += OnTimedEvent;
            timer.Enabled = true;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            if (currentTime <= 0)
            {
                timer.Enabled = false;
                await End();
            } else
            {
                currentTime--;
                StateHasChanged();
            }
        });
    }

    public async Task End() => await EndListening.InvokeAsync();
}
